#!/bin/bash

set -o pipefail
set -x

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source `dirname $0`/common.sh

# Read inputs
source=$1

payload=$(mktemp helm-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
setup_resource $payload $source
echo "Resource setup successful."

# Parse parameters
namespace=$(jq -r '.source.namespace // "default"' < $payload)
tiller_namespace=$(jq -r '.source.tiller_namespace // "kube-system"' < $payload)
chart=$(jq -r '.params.chart // ""' < $payload)
version=$(jq -r '.params.version // ""' < $payload)
release_file=$(jq -r '.params.release // ""' < $payload)
values=$(jq -r '.params.values // "" | if type == "array" then .[] else . end' < $payload)
wait_until_ready=$(jq -r '.params.wait_until_ready // 0' < $payload)
debug=$(jq -r '.params.debug // "false"' < $payload)
replace=$(jq -r '.params.replace // "false"' < $payload)
delete=$(jq -r '.params.delete // "false"' < $payload)
purge=$(jq -r '.params.purge // "false"' < $payload)
devel=$(jq -r '.params.devel // "false"' < $payload)
override_values=$(jq -r ".params.override_values[]? | if .key and .value and (.hide // false) == false then (.key + \"=\" + .value) else empty end | @base64"  < $payload)
override_values_file=$(jq -r ".params.override_values[]? | if .key and .path and (.hide // false) == false then (.key + \"=\" + .path) else empty end" < $payload)
override_secrets=$(jq -r ".params.override_values[]? | if .key and .value and .hide then (.key + \"=\" + .value) else empty end | @base64"  < $payload)
override_secrets_file=$(jq -r ".params.override_values[]? | if .key and .path and .hide then (.key + \"=\" + .path) else empty end" < $payload)
recreate_pods=$(jq -r '.params.recreate_pods // "false"' < $payload)

if [ -z "$chart" ]; then
    echo "invalid payload (missing chart)"
    exit 1
fi
if [ -n "$release_file" ]; then
    release=`cat $source/$release_file`
else
    release=$(jq -r '.source.release // ""' < $payload)
fi

if [[ "$chart" == *.tgz ]] || [[ -d "$source/$chart" ]]; then
    # it's a file/directory
    chart_full="$source/$chart"
    version=""
else
    # get from a repo
    chart_full="$chart"
fi

set_overriden_values() {
    # Get value from given path
    for overriden_value_file in $override_values_file; do
        # Get key and value for each overridden file value
        key=${overriden_value_file%%=*}
        value=${overriden_value_file#*=}
        helm_cmd="$helm_cmd --set '$key=$(cat $source/$value)'"
    done

    # Set value directly
    for overriden_value in $override_values; do
        helm_cmd="$helm_cmd --set '$(echo $overriden_value | base64 -d)'"
    done

    # Get value from given path, but hide the value in the echo
    for overriden_secret_file in $override_secrets_file; do
        # Get key and value for each overridden file value
        key=${overriden_secret_file%%=*}
        value=${overriden_secret_file#*=}
        helm_cmd="$helm_cmd --set '$key=$(cat $source/$value)'"
    done

    # Set value directly, but hide the value in the echo
    for overriden_secret in $override_secrets; do
        kv=$(echo $overriden_secret | base64 -d)
        key=${kv%%=*}
        value=${kv#*=}
        helm_cmd="$helm_cmd --set '$kv'"
    done
}

helm_install() {
    helm_cmd="--namespace $namespace"
    if [ -n "$release" ]; then
        helm_cmd="$helm_cmd -n $release"
    fi
    if [ -n "$values" ]; then
        for value in $values; do
            helm_cmd="$helm_cmd -f $source/$value"
        done
    fi
    set_overriden_values
    if [ "$replace" = true ]; then
        helm_cmd="$helm_cmd --replace"
    fi
    if [ "$debug" = true ]; then
        helm_cmd="$helm_cmd --dry-run --debug"
    fi
    if [ "$devel" = true ]; then
        helm_cmd="$helm_cmd --devel"
    fi
    if [ -n "$wait_until_ready" ] && [ "$wait_until_ready" -gt "0" ]; then
        helm_cmd="$helm_cmd --wait --timeout $wait_until_ready"
    fi
    if [ -n "$version" ]; then
        helm_cmd="$helm_cmd --version $version"
    fi
    echo $helm_cmd

    eval call_helm "install" ${helm_cmd} ${chart_full}
}

# Find the current revision of a helm release
current_revision() {
    revision=`call_helm history $release | grep "DEPLOYED" | awk '{print $1}'`
    echo $revision
}

helm_upgrade() {
    helm_cmd="$release"
    if [ -n "$values" ]; then
        for value in $values; do
            helm_cmd="$helm_cmd -f $source/$value"
        done
    fi
    if [ -n "$wait_until_ready" ] && [ "$wait_until_ready" -gt "0" ]; then
        helm_cmd="$helm_cmd --wait --timeout $wait_until_ready"
    fi
    set_overriden_values
    if [ "$debug" = true ]; then
        helm_cmd="$helm_cmd --dry-run --debug"
    fi
    if [ "$devel" = true ]; then
        helm_cmd="$helm_cmd --devel"
    fi
    if [ -n "$version" ]; then
        helm_cmd="$helm_cmd --version $version"
    fi
    if [ "$recreate_pods" = true ]; then
        helm_cmd="$helm_cmd --recreate-pods"
    fi
    eval call_helm upgrade $helm_cmd $chart_full
}

helm_delete() {
    if [ -z "$release" ]; then
        echo "invalid payload (missing release if delete=true)"
        exit 1
    fi
    echo "Deleting the release $release..."
    if [ "$debug" = true ]; then
        helm_cmd="$helm_cmd --dry-run --debug"
    fi
    eval call_helm delete $helm_cmd $release
}

helm_purge() {
    if [ -z "$release" ]; then
        echo "invalid payload (missing release if delete=true)"
        exit 1
    fi
    echo "Deleting with purge the release $release..."
    helm_cmd=" --purge"
    if [ "$debug" = true ]; then
        helm_cmd="$helm_cmd --dry-run --debug"
    fi
    eval call_helm delete $helm_cmd $release
}

wait_ready_notice() {
    if [ -n "$wait_until_ready" ] && [ "$wait_until_ready" -gt "0" ]; then
        echo "Waiting until deployment of $release is ready... (up to $wait_until_ready seconds)"
    fi
}

is_deployed() {
    if [ -n "$1" ]; then
        set +e
        set +o pipefail
        call_helm history $1 2>&1 | grep 'DEPLOYED' > /dev/null
        if [ $? = 0 ]; then
            # exists
            echo true
        else
            # does not exist
            echo false
        fi
        set -o pipefail
        set -e
    else
        echo false
    fi
}


if [ "$delete" = true ]; then
    if [ "$purge" = true ]; then
        helm_purge
    else
        helm_delete
    fi
    result="$(jq -n "{version:{release:\"$release\", deleted: \"true\"}, metadata: [{name: \"release\", value: \"$release\"}]}")"
    echo "$result" | jq -s add  >&3
else
    echo "Choosing whether to install or upgrade..."
    if [ "$(is_deployed $release)" = "true" ]; then
        echo "Upgrading $release"
        helm_upgrade
    else
        echo "Installing $release"
        helm_install
    fi

    revision=$(current_revision)
    echo "Deployed revision $revision of $release"
    wait_ready_notice
    result="$(jq -n "{version:{release:\"$release\", revision:\"$revision\"}, metadata: [{name: \"release\", value: \"$release\"},{name: \"revision\", value: \"$revision\"}]}")"
    echo "$result" | jq -s add  >&3
fi
